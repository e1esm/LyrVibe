// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/proto/artist-service.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on VerificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerificationRequestMultiError, or nil if none found.
func (m *VerificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 4 || l > 10 {
		err := VerificationRequestValidationError{
			field:  "Username",
			reason: "value length must be between 4 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_VerificationRequest_Username_Pattern.MatchString(m.GetUsername()) {
		err := VerificationRequestValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"(?i)^[A-Za-z0-9_]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCountry()) < 2 {
		err := VerificationRequestValidationError{
			field:  "Country",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_VerificationRequest_Country_Pattern.MatchString(m.GetCountry()) {
		err := VerificationRequestValidationError{
			field:  "Country",
			reason: "value does not match regex pattern \"(?i)^[A-Z-a-z]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFirstName()); l < 1 || l > 10 {
		err := VerificationRequestValidationError{
			field:  "FirstName",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_VerificationRequest_FirstName_Pattern.MatchString(m.GetFirstName()) {
		err := VerificationRequestValidationError{
			field:  "FirstName",
			reason: "value does not match regex pattern \"(?i)^[A-Za-z]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSecondName()); l < 1 || l > 20 {
		err := VerificationRequestValidationError{
			field:  "SecondName",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_VerificationRequest_SecondName_Pattern.MatchString(m.GetSecondName()) {
		err := VerificationRequestValidationError{
			field:  "SecondName",
			reason: "value does not match regex pattern \"(?i)^[A-Za-z]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerificationRequestMultiError(errors)
	}

	return nil
}

// VerificationRequestMultiError is an error wrapping multiple validation
// errors returned by VerificationRequest.ValidateAll() if the designated
// constraints aren't met.
type VerificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerificationRequestMultiError) AllErrors() []error { return m }

// VerificationRequestValidationError is the validation error returned by
// VerificationRequest.Validate if the designated constraints aren't met.
type VerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerificationRequestValidationError) ErrorName() string {
	return "VerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerificationRequestValidationError{}

var _VerificationRequest_Username_Pattern = regexp.MustCompile("(?i)^[A-Za-z0-9_]+$")

var _VerificationRequest_Country_Pattern = regexp.MustCompile("(?i)^[A-Z-a-z]+$")

var _VerificationRequest_FirstName_Pattern = regexp.MustCompile("(?i)^[A-Za-z]+$")

var _VerificationRequest_SecondName_Pattern = regexp.MustCompile("(?i)^[A-Za-z]+$")

// Validate checks the field values on VerificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerificationResponseMultiError, or nil if none found.
func (m *VerificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsVerified

	if all {
		switch v := interface{}(m.GetRequestStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VerificationResponseValidationError{
					field:  "RequestStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VerificationResponseValidationError{
					field:  "RequestStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerificationResponseValidationError{
				field:  "RequestStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VerificationResponseMultiError(errors)
	}

	return nil
}

// VerificationResponseMultiError is an error wrapping multiple validation
// errors returned by VerificationResponse.ValidateAll() if the designated
// constraints aren't met.
type VerificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerificationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerificationResponseMultiError) AllErrors() []error { return m }

// VerificationResponseValidationError is the validation error returned by
// VerificationResponse.Validate if the designated constraints aren't met.
type VerificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerificationResponseValidationError) ErrorName() string {
	return "VerificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerificationResponseValidationError{}

// Validate checks the field values on RequestStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RequestStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RequestStatusMultiError, or
// nil if none found.
func (m *RequestStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestStatus

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return RequestStatusMultiError(errors)
	}

	return nil
}

// RequestStatusMultiError is an error wrapping multiple validation errors
// returned by RequestStatus.ValidateAll() if the designated constraints
// aren't met.
type RequestStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestStatusMultiError) AllErrors() []error { return m }

// RequestStatusValidationError is the validation error returned by
// RequestStatus.Validate if the designated constraints aren't met.
type RequestStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestStatusValidationError) ErrorName() string { return "RequestStatusValidationError" }

// Error satisfies the builtin error interface
func (e RequestStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestStatusValidationError{}
