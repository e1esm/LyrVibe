// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: v1/proto/music-service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MusicService_AddNewTrack_FullMethodName = "/music.api.v1.proto.MusicService/AddNewTrack"
	MusicService_DeleteTrack_FullMethodName = "/music.api.v1.proto.MusicService/DeleteTrack"
	MusicService_AddNewAlbum_FullMethodName = "/music.api.v1.proto.MusicService/AddNewAlbum"
)

// MusicServiceClient is the client API for MusicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicServiceClient interface {
	AddNewTrack(ctx context.Context, in *NewTrackRequest, opts ...grpc.CallOption) (*NewTrackResponse, error)
	DeleteTrack(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	AddNewAlbum(ctx context.Context, in *NewAlbumRequest, opts ...grpc.CallOption) (*NewAlbumResponse, error)
}

type musicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicServiceClient(cc grpc.ClientConnInterface) MusicServiceClient {
	return &musicServiceClient{cc}
}

func (c *musicServiceClient) AddNewTrack(ctx context.Context, in *NewTrackRequest, opts ...grpc.CallOption) (*NewTrackResponse, error) {
	out := new(NewTrackResponse)
	err := c.cc.Invoke(ctx, MusicService_AddNewTrack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) DeleteTrack(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, MusicService_DeleteTrack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) AddNewAlbum(ctx context.Context, in *NewAlbumRequest, opts ...grpc.CallOption) (*NewAlbumResponse, error) {
	out := new(NewAlbumResponse)
	err := c.cc.Invoke(ctx, MusicService_AddNewAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicServiceServer is the server API for MusicService service.
// All implementations must embed UnimplementedMusicServiceServer
// for forward compatibility
type MusicServiceServer interface {
	AddNewTrack(context.Context, *NewTrackRequest) (*NewTrackResponse, error)
	DeleteTrack(context.Context, *DeleteRequest) (*DeleteResponse, error)
	AddNewAlbum(context.Context, *NewAlbumRequest) (*NewAlbumResponse, error)
	mustEmbedUnimplementedMusicServiceServer()
}

// UnimplementedMusicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMusicServiceServer struct {
}

func (UnimplementedMusicServiceServer) AddNewTrack(context.Context, *NewTrackRequest) (*NewTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewTrack not implemented")
}
func (UnimplementedMusicServiceServer) DeleteTrack(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrack not implemented")
}
func (UnimplementedMusicServiceServer) AddNewAlbum(context.Context, *NewAlbumRequest) (*NewAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewAlbum not implemented")
}
func (UnimplementedMusicServiceServer) mustEmbedUnimplementedMusicServiceServer() {}

// UnsafeMusicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicServiceServer will
// result in compilation errors.
type UnsafeMusicServiceServer interface {
	mustEmbedUnimplementedMusicServiceServer()
}

func RegisterMusicServiceServer(s grpc.ServiceRegistrar, srv MusicServiceServer) {
	s.RegisterService(&MusicService_ServiceDesc, srv)
}

func _MusicService_AddNewTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).AddNewTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_AddNewTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).AddNewTrack(ctx, req.(*NewTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_DeleteTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).DeleteTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_DeleteTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).DeleteTrack(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_AddNewAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).AddNewAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_AddNewAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).AddNewAlbum(ctx, req.(*NewAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MusicService_ServiceDesc is the grpc.ServiceDesc for MusicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "music.api.v1.proto.MusicService",
	HandlerType: (*MusicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewTrack",
			Handler:    _MusicService_AddNewTrack_Handler,
		},
		{
			MethodName: "DeleteTrack",
			Handler:    _MusicService_DeleteTrack_Handler,
		},
		{
			MethodName: "AddNewAlbum",
			Handler:    _MusicService_AddNewAlbum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/proto/music-service.proto",
}
